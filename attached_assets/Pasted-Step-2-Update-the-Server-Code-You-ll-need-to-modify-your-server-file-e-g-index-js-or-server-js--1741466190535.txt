Step 2: Update the Server Code
You’ll need to modify your server file (e.g., index.js or server.js) to add a new endpoint for sending SMS and update the existing /contacts endpoint to track intake status.
Prerequisites
Ensure you’ve installed the twilio package. In Replit’s shell, run:
npm install twilio
You’re using a database (e.g., PostgreSQL via pg). If not, let me know, and I’ll adjust this.
2.1 Add the /send-intake-sms/:contactId Endpoint
This endpoint sends an SMS to a contact when triggered.
What to Do
Open your server file and add this code:
javascript
const twilio = require('twilio');
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

app.post('/send-intake-sms/:contactId', verifyToken, async (req, res) => {
  const contactId = req.params.contactId;
  const userId = req.userId;

  try {
    const clientDb = await pool.connect();
    try {
      const contactResult = await clientDb.query(
        'SELECT * FROM contacts WHERE id = $1 AND user_id = $2',
        [contactId, userId]
      );

      if (contactResult.rows.length === 0) {
        clientDb.release();
        return res.status(404).json({ error: 'Contact not found' });
      }

      const contact = contactResult.rows[0];
      const userResult = await clientDb.query('SELECT email FROM users WHERE id = $1', [userId]);
      const userName = userResult.rows[0].email.split('@')[0]; // Extract name from email

      // Send SMS via Twilio
      await client.messages.create({
        body: `Hi ${contact.first_name}, ${userName} would like to connect with you. Please call 513-951-7691 to complete your intake with our AI relationship assistant.`,
        from: process.env.TWILIO_PHONE_NUMBER,
        to: contact.phone_number
      });

      // Log the SMS in the database
      await clientDb.query(
        'INSERT INTO sms_log (contact_id, user_id, message_type, created_at) VALUES ($1, $2, $3, NOW())',
        [contactId, userId, 'intake_invitation']
      );

      clientDb.release();
      res.status(200).json({ message: 'SMS sent successfully' });
    } catch (error) {
      clientDb.release();
      throw error;
    }
  } catch (error) {
    console.error('Error sending intake SMS:', error.message);
    res.status(500).json({ error: 'Failed to send SMS' });
  }
});

Notes
verifyToken is assumed to be middleware that checks the user’s JWT token and sets req.userId. If you don’t have this, let me know how your authentication works.

pool is your database connection pool (e.g., from pg).
Why
This endpoint:
Verifies the contact exists and belongs to the user.

Sends a personalized SMS using Twilio.

Logs the action for tracking.
2.2 Update the /contacts Endpoint
This endpoint should return a list of contacts with their intake status.
What to Do
Find or add the /contacts endpoint in your server file and update it like this:
javascript
app.get('/contacts', verifyToken, async (req, res) => {
  const userId = req.userId;
  try {
    const client = await pool.connect();
    const result = await client.query(`
      SELECT 
        c.id, 
        c.first_name, 
        c.last_name, 
        c.company_name, 
        c.phone_number,
        c.linkedin_url,
        CASE WHEN ir.id IS NOT NULL THEN true ELSE false END as has_intake
      FROM 
        contacts c
      LEFT JOIN 
        (SELECT DISTINCT contact_id, id FROM intake_responses) ir ON c.id = ir.contact_id
      WHERE 
        c.user_id = $1
      ORDER BY 
        c.created_at DESC
    `, [userId]);
    client.release();
    res.json({ contacts: result.rows });
  } catch (error) {
    console.error('Error fetching contacts:', error.message);
    res.status(500).json({ error: 'Failed to fetch contacts' });
  }
});

Why
The CASE WHEN clause checks if an intake response exists, setting has_intake to true or false.

This lets the frontend know whether to show the "Send Intake via SMS" button.
Step 3: Update the Database Schema
You need tables to log SMS sends and track intake completions.
What to Do
In your server file, where you initialize your database (likely near the top of index.js), add this:
javascript
await client.query(`
  CREATE TABLE IF NOT EXISTS sms_log (
    id SERIAL PRIMARY KEY,
    contact_id INTEGER REFERENCES contacts(id),
    user_id INTEGER REFERENCES users(id),
    message_type VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`);

await client.query(`
  CREATE TABLE IF NOT EXISTS intake_responses (
    id SERIAL PRIMARY KEY,
    contact_id INTEGER REFERENCES contacts(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`);

Notes
Run this once when your app starts (e.g., wrap it in an async function called at startup).

If you’re using an external database (e.g., Replit’s database or an external PostgreSQL), connect to it and run these queries manually if needed.
Why
sms_log tracks every SMS sent.

intake_responses records when a contact completes their intake (you’ll need to populate this separately when intake happens).
Step 4: Update the Frontend (dashboard.html)
Now, let’s update your dashboard to display contacts and add the SMS button.
What to Do
Create or edit public/dashboard.html in your Replit project with this code:
html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - AI Relationship Agent</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 10px; text-align: left; }
    .hidden { display: none; }
  </style>
</head>
<body>
  <h1>Contact Management</h1>
  <button id="addContactBtn">Add Contact</button>
  <form id="addContactForm" class="hidden">
    <input type="text" name="first_name" placeholder="First Name" required>
    <input type="text" name="last_name" placeholder="Last Name" required>
    <input type="text" name="company_name" placeholder="Company Name">
    <input type="url" name="linkedin_url" placeholder="LinkedIn URL">
    <input type="tel" name="phone_number" placeholder="Phone Number" required>
    <button type="submit">Add Contact</button>
  </form>
  <h2>Your Contacts</h2>
  <table id="contactsTable">
    <thead>
      <tr>
        <th>Name</th>
        <th>Company</th>
        <th>Phone</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    const token = localStorage.getItem('token');
    if (!token) window.location.href = '/';

    document.getElementById('addContactBtn').addEventListener('click', () => {
      document.getElementById('addContactForm').classList.toggle('hidden');
    });

    document.getElementById('addContactForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      const response = await fetch('/add-contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify(data)
      });
      if (response.ok) {
        alert('Contact added successfully!');
        e.target.reset();
        loadContacts();
      } else {
        alert('Error adding contact');
      }
    });

    async function loadContacts() {
      const response = await fetch('/contacts', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      const tbody = document.querySelector('#contactsTable tbody');
      tbody.innerHTML = '';
      data.contacts.forEach(contact => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${contact.first_name} ${contact.last_name}</td>
          <td>${contact.company_name || '-'}</td>
          <td>${contact.phone_number}</td>
          <td>${contact.has_intake ? 'Completed' : 'Pending'}</td>
          <td>
            ${!contact.has_intake ? `<button onclick="sendIntakeSMS(${contact.id})">Send Intake via SMS</button>` : ''}
          </td>
        `;
        tbody.appendChild(tr);
      });
    }

    async function sendIntakeSMS(contactId) {
      const button = event.target;
      button.disabled = true;
      const response = await fetch(`/send-intake-sms/${contactId}`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (response.ok) {
        alert('SMS sent successfully!');
        loadContacts();
      } else {
        alert('Failed to send SMS');
        button.disabled = false;
      }
    }

    loadContacts();
  </script>
</body>
</html>

Notes
Ensure your server serves this file (e.g., via express.static('public') in your server code).

The /add-contact endpoint is assumed to exist. If not, let me know, and I’ll provide it.
Why
The table shows each contact’s details and intake status.

The "Send Intake via SMS" button appears only for contacts without an intake, and it triggers the new endpoint.
