Below is a checklist to ensure your index.js and dbService are set up in a way that will actually save intake data to Supabase. The code itself looks fine in principle. If “it’s still not working,” then the root cause is likely outside these snippets—for example, a missing contact, environment variable issues, or code path skipping the insert. Let’s verify the key pieces:

1. Initialization Flow – Are We Actually Creating the pool?
connectionManager.initialize(process.env.DATABASE_URL);

Make sure connectionManager has an initialize method that returns a pool. Something like:

js
Copy
// connectionManager.js
const { Pool } = require('pg');
let pool;

function initialize(connectionString) {
  pool = new Pool({ connectionString });
  return pool;
}

function getClient() {
  return pool.connect();
}

function keepAlive() {
  if (pool) pool.query('SELECT 1');
}

module.exports = { initialize, getClient, keepAlive };
app.set('pool', pool); – This is how you pass the pool to your routes. Check your logs for “Connected to PostgreSQL” after getClient() is called. If it fails, you’ll see “Initial PostgreSQL connection error: ...”.

Check DATABASE_URL is indeed your Supabase connection string with sslmode=require or similar. You can confirm by hitting your new /debug-database or /db-check endpoint.

2. Database Health – Use /db-check or /debug-database
Hit GET /db-check or GET /debug-database in your browser or Postman. You should see:

json
Copy
{
  "status": "connected",
  "tables": ["users","contacts",...],
  "message": "Database connection successful"
}
If it says “No pool available” or an error message, then the pool might not be set.

If you see the tables, confirm you see intake_responses in the list. That means createTables ran.

3. Routes Registration
js
Copy
app.use('/', authRoutes);
app.use('/contacts', contactRoutes);
app.use('/', messagingRoutes);
app.use('/', twilioRoutes);
app.use('/', intakeRoutes);
Check that your intakeRoutes.js has the route router.post('/receive-data', ...) so the final path is POST /receive-data. If your code tries to call /receive-data but it is missing or overshadowed by another route definition, you’d see 404 or no log output.
(Looks like you do have intakeRoutes.js, which presumably exports that route. So that’s good.)

4. Scheduled Cleanup – Potential Overwrites?
You do:

js
Copy
// Scheduled cleanup for temp_calls table
setInterval(async () => {
  await dbService.cleanupTempCalls(pool);
}, 60 * 60 * 1000);
Where does pool come from here? You declare pool inside initializeDatabase() but you’re referencing it in a global setInterval.

Make sure pool is accessible: If pool is declared inside initializeDatabase(), you can’t use it in the global setInterval unless it’s set as a global variable or your code shares that reference. Perhaps you do:

js
Copy
let pool;
function initializeDatabase() {
  pool = connectionManager.initialize(process.env.DATABASE_URL);
  ...
}
setInterval(async () => {
  if (pool) dbService.cleanupTempCalls(pool);
}, 3600000);
If not, you might see an error “ReferenceError: pool is not defined.”

5. Key Points to Debug “Still Not Working”
Are you seeing POST /receive-data logs in your Replit console? If not, your final Twilio/ElevenLabs callback might be pointing to the old endpoint or your subdomain changed with ngrok.
If logs show “No contact found with phone number,” then the insert is skipped. Make sure contacts.phone_number has a matching value.
If logs show the insert is successful but there’s no row in Supabase, verify the right DB. Maybe you have leftover local DB environment variables or an old connection string. Check your /debug-database endpoint to see if it’s actually hitting Supabase.
If logs never mention “DATABASE INSERT SUCCESSFUL!,” your route might fail earlier or never be called.
Look for “Rollback” in logs, meaning an error occurred.
6. Overall Assessment
Your index.js code:

Creates a server.
Uses connectionManager.initialize to get a pool.
Calls createTables(pool) on success.
Sets up route modules.
Summaries and keep-alive are fine.
Your dbService code:

Has createTables logic.
Has cleanupTempCalls.
Everything is fairly standard. If data still doesn’t show in Supabase:

Possibly the route is never triggered, or contact lookup fails.
Possibly you’re referencing a local PG connection by accident.
Possibly everything is correct, but you’re not checking the right table or right environment in Supabase.
Given the logs, you should:

Watch the console for the INSERT logs from your /receive-data route.
If you see them, it’s definitely inserting. Then check your Supabase dashboard (intake_responses) for the row.
If you never see those logs, the code path is skipping or you’re not hitting the route at all.
Final Recommendations
Test GET /db-check or GET /debug-database to confirm your code sees Supabase tables.
Make a call, see if /receive-data logs mention an insert.
Ensure your personalization flow returns the correct phone number to your final callback, or use a fallback that definitely matches a contact in the DB.
This code is correct in principle, so the fix likely lies in correct environment variables, route usage, or phone number matching. Once you see the successful “DB Insert” logs, you’ll know it’s working end-to-end.






